# ============================================================================
# PROTECTIVE RULES - Absolute Protection Level
# ============================================================================
# These rules use select_all: true to enforce critical standards across the
# entire codebase, regardless of what has changed. They protect against:
# - Runtime errors that could crash the application
# - Security vulnerabilities
# - Project-wide standards that must always be maintained
#
# WHEN TO USE PROTECTIVE RULES:
# - Safety/runtime issues (prevents crashes)
# - Security patterns (no secrets, no vulnerable code)
# - Project standards (package manager consistency)
# - License/legal compliance
# ============================================================================

id: codeguardian-protective-rules
description: Critical rules that must always pass for the entire codebase
rule:
  type: all_of
  rules:
    # ========================================================================
    # RULE 1: No Yarn Lock File
    # ========================================================================
    # Why: This project uses npm exclusively. Having both package-lock.json
    # and yarn.lock can cause dependency conflicts and confusion.
    #
    # Protection Level: ABSOLUTE - Always check entire repository
    - type: for_each
      select:
        type: select_files
        path_pattern: 'yarn.lock'
        select_all: true  # Check entire repo, not just diff
      assert:
        type: assert_match
        pattern: '.*'
        should_match: false
        suggestion: 'Remove yarn.lock file. This project uses npm exclusively. Use package-lock.json instead.'

    # ========================================================================
    # RULE 2: Prevent Direct Assertion Evaluation (Runtime Safety)
    # ========================================================================
    # Why: This is a unique architectural constraint of Code Guardian.
    # Assertions are designed to be used within combinators only.
    # Direct evaluation will throw an error at runtime.
    #
    # Protection Level: ABSOLUTE - Prevents runtime crashes
    - type: for_each
      select:
        type: select_files
        path_pattern: 'src/**/*.ts'
        exclude_pattern: '**/test*'
        select_all: true  # This pattern causes runtime errors and should never exist
      assert:
        type: assert_match
        pattern: '\.evaluate\(.*AssertionRule'
        should_match: false
        suggestion: 'Use assertions within combinators (e.g., for_each) instead of direct evaluation.'

    # ========================================================================
    # RULE 3: Verify Package.json Required Scripts
    # ========================================================================
    # Why: Critical npm scripts must always be present and correct to ensure
    # the project can be built, tested, and validated properly.
    #
    # Protection Level: ABSOLUTE - Core project functionality
    - type: for_each
      select:
        type: select_files
        path_pattern: 'package.json'
        select_all: true  # Always verify package.json has required scripts
      assert:
        type: all_of
        rules:
          - type: assert_match
            pattern: '"build":\s*"tsc"'
            suggestion: 'Add build script to package.json: "build": "tsc"'
          - type: assert_match
            pattern: '"test":\s*"jest"'
            suggestion: 'Add test script to package.json: "test": "jest"'
          - type: assert_match
            pattern: '"typecheck":\s*"tsc --noEmit"'
            suggestion: 'Add typecheck script to package.json: "typecheck": "tsc --noEmit"'

    # ========================================================================
    # RULE 4: No Test Files Outside Tests Directory
    # ========================================================================
    # Why: Test files should be organized in the tests directory for consistency
    # and to maintain a clean project structure.
    #
    # Protection Level: ABSOLUTE - Enforce test file organization
    - type: for_each
      select:
        type: select_files
        path_pattern: '**/*.{test,spec}.{ts,js,tsx,jsx}'
        exclude_pattern: 'tests/**/*'
        status: ['added']  # Only check newly added test files
      assert:
        type: assert_match
        pattern: '.*'
        should_match: false
        suggestion: 'Move test files to the tests/ directory'

    # ========================================================================
    # RULE 5: No Markdown Files in Project Root
    # ========================================================================
    # Why: Keep the project root clean. Documentation should be organized
    # in appropriate subdirectories.
    #
    # Protection Level: ABSOLUTE - Maintain clean project root
    - type: for_each
      select:
        type: select_files
        path_pattern: '*.md'
        status: ['added']  # Only check newly added markdown files
      assert:
        type: assert_match
        pattern: '.*'
        should_match: false
        suggestion: 'Place markdown files in appropriate subdirectories (e.g., docs/, .github/, etc.)'

    # ========================================================================
    # RULE 6: Only Markdown Files in .claude/commands
    # ========================================================================
    # Why: The .claude/commands directory should contain only markdown files
    # with instructions. File names should be intuitive commands, and the
    # content should be the instructions themselves.
    #
    # Protection Level: ABSOLUTE - Enforce command documentation standards
    - type: for_each
      select:
        type: select_files
        path_pattern: '.claude/commands/**/*'
        exclude_pattern: '.claude/commands/**/*.md'
        status: ['added']  # Check newly added files
      assert:
        type: assert_match
        pattern: '.*'
        should_match: false
        suggestion: 'Only .md files allowed in .claude/commands/. Rename to .md or remove file.'

    # ========================================================================
    # RULE 7: No Shell Scripts in Project Root
    # ========================================================================
    # Why: Shell scripts in the project root can clutter the directory and
    # should be organized in appropriate subdirectories like scripts/ or bin/.
    #
    # Protection Level: ABSOLUTE - Maintain clean project root
    - type: for_each
      select:
        type: select_files
        path_pattern: '*.sh'
        status: ['added']  # Only check newly added shell scripts
      assert:
        type: assert_match
        pattern: '.*'
        should_match: false
        suggestion: 'Move shell scripts to scripts/ or bin/ directory'